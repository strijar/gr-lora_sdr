# auto-generated by grc.converter

id: lora_sdr_frame_sync
label: Frame sync
category: '[LoRa_RX]'

parameters:
-   id: samp_rate
    label: Samp_rate
    dtype: float
-   id: bandwidth
    label: Bandwidth
    dtype: int
-   id: sf
    label: Sf
    dtype: int
-   id: impl_head
    label: Impl_head
    dtype: bool

inputs:
-   domain: stream
    dtype: complex
-   domain: message
    id: CR
-   domain: message
    id: pay_len
-   domain: message
    id: crc
-   domain: message
    id: err
-   domain: message
    id: frame_err
    optional: true

outputs:
-   domain: stream
    dtype: complex
    vlen: ${ 2**sf }
-   domain: message
    id: new_frame

templates:
    imports: import lora_sdr
    make: lora_sdr.frame_sync(${samp_rate}, ${bandwidth}, ${sf}, ${impl_head})

documentation: |-
    Block taking care of the preamble detection, CFO and STO estimation and correction.
        Parameters:
            Samp_rate: Sampling rate (should be equal to the bandwidth in the current implementation)
            Bandwidth: Bandwidth
            sf: spreading factor
            impl_head: usage of an implicit header (explicit will be used otherwise)
        Input:
            in: stream of complex valued sampled
            CR: coding rate
            pay_len: payload length in bytes
            crc: presence of a payload CRC
            err: error in the explicit header
            (optional) frame_err: indicate to save the samples from the last received frame (Need to define GRLORA_DEBUG in cpp code)
        Output:
            out: stream of vectors of 2^sf samples

file_format: 1
